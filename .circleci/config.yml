version: 2
jobs:
  lint:
    docker:
      - image: golangci/golangci-lint:v1.45-alpine
    steps:
      - checkout
      - run: golangci-lint run

  # The kafka 0.10 tests are maintained as a separate configuration because
  # kafka only supported plain text SASL in this version.
  kafka-010:
    working_directory: &working_directory /go/src/github.com/segmentio/kafka-go
    environment:
      KAFKA_VERSION: "0.10.1"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:0.10.1.1
      ports:
      - 9092:9092
      - 9093:9093
      environment:
        KAFKA_BROKER_ID: '1'
        KAFKA_CREATE_TOPICS: 'test-writer-0:3:1,test-writer-1:3:1'
        KAFKA_DELETE_TOPIC_ENABLE: 'true'
        KAFKA_ADVERTISED_HOST_NAME: 'localhost'
        KAFKA_ADVERTISED_PORT: '9092'
        KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
        KAFKA_MESSAGE_MAX_BYTES: '200000000'
        KAFKA_LISTENERS: 'PLAINTEXT://:9092,SASL_PLAINTEXT://:9093'
        KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092,SASL_PLAINTEXT://localhost:9093'
        KAFKA_SASL_ENABLED_MECHANISMS: 'PLAIN'
        KAFKA_OPTS: "-Djava.security.auth.login.config=/opt/kafka/config/kafka_server_jaas.conf"
        CUSTOM_INIT_SCRIPT: |-
          echo -e 'KafkaServer {\norg.apache.kafka.common.security.plain.PlainLoginModule required\n username="adminplain"\n password="admin-secret"\n user_adminplain="admin-secret";\n  };' > /opt/kafka/config/kafka_server_jaas.conf;
    steps: &steps
    - checkout
    - restore_cache:
        key: kafka-go-mod-{{ checksum "go.sum" }}-1
    - run:
        name: Download dependencies
        command: go mod download
    - save_cache:
        key: kafka-go-mod-{{ checksum "go.sum" }}-1
        paths:
        - /go/pkg/mod
    - run:
        name: Test kafka-go
        command: go test -race -cover ./...
    - run:
        name: Test kafka-go unsafe
        command: go test -tags=unsafe -race -cover ./...
    - run:
        name: Test kafka-go/sasl/aws_msk_iam
        working_directory: ./sasl/aws_msk_iam
        command: go test -race -cover ./...

  # Starting at version 0.11, the kafka features and configuration remained
  # mostly stable, so we can use this CI job configuration as template for other
  # versions as well.
  kafka-011:
    working_directory: *working_directory
    environment:
      KAFKA_VERSION: "0.11.0"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:2.11-0.11.0.3
      ports:
      - 9092:9092
      - 9093:9093
      environment: &environment
        KAFKA_BROKER_ID: '1'
        KAFKA_CREATE_TOPICS: 'test-writer-0:3:1,test-writer-1:3:1'
        KAFKA_DELETE_TOPIC_ENABLE: 'true'
        KAFKA_ADVERTISED_HOST_NAME: 'localhost'
        KAFKA_ADVERTISED_PORT: '9092'
        KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
        KAFKA_MESSAGE_MAX_BYTES: '200000000'
        KAFKA_LISTENERS: 'PLAINTEXT://:9092,SASL_PLAINTEXT://:9093'
        KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092,SASL_PLAINTEXT://localhost:9093'
        KAFKA_SASL_ENABLED_MECHANISMS: 'PLAIN,SCRAM-SHA-256,SCRAM-SHA-512'
        KAFKA_OPTS: "-Djava.security.auth.login.config=/opt/kafka/config/kafka_server_jaas.conf"
        CUSTOM_INIT_SCRIPT: |-
          apk add libgcc;
          echo -e 'KafkaServer {\norg.apache.kafka.common.security.scram.ScramLoginModule required\n username="adminscram"\n password="admin-secret";\n org.apache.kafka.common.security.plain.PlainLoginModule required\n username="adminplain"\n password="admin-secret"\n user_adminplain="admin-secret";\n  };' > /opt/kafka/config/kafka_server_jaas.conf;
          /opt/kafka/bin/kafka-configs.sh --zookeeper localhost:2181 --alter --add-config 'SCRAM-SHA-256=[password=admin-secret-256],SCRAM-SHA-512=[password=admin-secret-512]' --entity-type users --entity-name adminscram
    steps: *steps

  kafka-101:
    working_directory: *working_directory
    environment:
      KAFKA_VERSION: "1.0.1"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:2.11-1.0.1
      ports:
      - 9092:9092
      - 9093:9093
      environment: *environment
    steps: *steps

  kafka-111:
    working_directory: *working_directory
    environment:
      KAFKA_VERSION: "1.1.1"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:2.11-1.1.1
      ports:
      - 9092:9092
      - 9093:9093
      environment: *environment
    steps: *steps

  kafka-201:
    working_directory: *working_directory
    environment:
      KAFKA_VERSION: "2.0.1"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:2.12-2.0.1
      ports:
      - 9092:9092
      - 9093:9093
      environment:
        <<: *environment
        KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.auth.SimpleAclAuthorizer'
        KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
    steps: *steps

  kafka-211:
    working_directory: *working_directory
    environment:
      KAFKA_VERSION: "2.1.1"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:2.12-2.1.1
      ports:
      - 9092:9092
      - 9093:9093
      # recently, the base image for some newer versions of kafka switched from
      # alpine to debian, which causes the "apk add ..." line to fail. The env
      # map should be used for any versions that fail due to being part of this
      # migration.
      environment: &environmentDebian
        <<: *environment
        KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.auth.SimpleAclAuthorizer'
        KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
        CUSTOM_INIT_SCRIPT: |-
          echo -e 'KafkaServer {\norg.apache.kafka.common.security.scram.ScramLoginModule required\n username="adminscram"\n password="admin-secret";\n org.apache.kafka.common.security.plain.PlainLoginModule required\n username="adminplain"\n password="admin-secret"\n user_adminplain="admin-secret";\n  };' > /opt/kafka/config/kafka_server_jaas.conf;
          /opt/kafka/bin/kafka-configs.sh --zookeeper localhost:2181 --alter --add-config 'SCRAM-SHA-256=[password=admin-secret-256],SCRAM-SHA-512=[password=admin-secret-512]' --entity-type users --entity-name adminscram
    steps: *steps

  kafka-222:
    working_directory: *working_directory
    environment:
      KAFKA_VERSION: "2.2.2"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:2.12-2.2.2
      ports:
      - 9092:9092
      - 9093:9093
      environment:
        <<: *environmentDebian
    steps: *steps

  kafka-231:
    working_directory: *working_directory
    environment:
      KAFKA_VERSION: "2.3.1"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:2.12-2.3.1
      ports:
      - 9092:9092
      - 9093:9093
      environment:
        <<: *environmentDebian
    steps: *steps

  kafka-241:
    working_directory: *working_directory
    environment:
      KAFKA_VERSION: "2.4.1"

      # Need to skip nettest to avoid these kinds of errors:
      #  --- FAIL: TestConn/nettest (17.56s)
      #    --- FAIL: TestConn/nettest/PingPong (7.40s)
      #      conntest.go:112: unexpected Read error: [7] Request Timed Out: the request exceeded the user-specified time limit in the request
      #      conntest.go:118: mismatching value: got 77, want 78
      #      conntest.go:118: mismatching value: got 78, want 79
      # ...
      #
      # TODO: Figure out why these are happening and fix them (they don't appear to be new).
      KAFKA_SKIP_NETTEST: "1"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:2.12-2.4.1
      ports:
      - 9092:9092
      - 9093:9093
      environment:
        <<: *environmentDebian
    steps: *steps

  kafka-260:
    working_directory: *working_directory
    environment:
      KAFKA_VERSION: "2.6.0"

      # Need to skip nettest to avoid these kinds of errors:
      #  --- FAIL: TestConn/nettest (17.56s)
      #    --- FAIL: TestConn/nettest/PingPong (7.40s)
      #      conntest.go:112: unexpected Read error: [7] Request Timed Out: the request exceeded the user-specified time limit in the request
      #      conntest.go:118: mismatching value: got 77, want 78
      #      conntest.go:118: mismatching value: got 78, want 79
      # ...
      #
      # TODO: Figure out why these are happening and fix them (they don't appear to be new).
      KAFKA_SKIP_NETTEST: "1"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:2.13-2.6.0
      ports:
      - 9092:9092
      - 9093:9093
      environment:
        <<: *environment
        KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
        KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
    steps: *steps

  kafka-271:
    working_directory: *working_directory
    environment:
      KAFKA_VERSION: "2.7.1"

      # Need to skip nettest to avoid these kinds of errors:
      #  --- FAIL: TestConn/nettest (17.56s)
      #    --- FAIL: TestConn/nettest/PingPong (7.40s)
      #      conntest.go:112: unexpected Read error: [7] Request Timed Out: the request exceeded the user-specified time limit in the request
      #      conntest.go:118: mismatching value: got 77, want 78
      #      conntest.go:118: mismatching value: got 78, want 79
      # ...
      #
      # TODO: Figure out why these are happening and fix them (they don't appear to be new).
      KAFKA_SKIP_NETTEST: "1"
    docker:
    - image: circleci/golang
    - image: wurstmeister/zookeeper
      ports:
      - 2181:2181
    - image: wurstmeister/kafka:2.13-2.7.1
      ports:
      - 9092:9092
      - 9093:9093
      environment:
        <<: *environment
        KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
        KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
    steps: *steps

workflows:
  version: 2
  run:
    jobs:
    - lint
    - kafka-010
    - kafka-011
    - kafka-101
    - kafka-111
    - kafka-201
    - kafka-211
    - kafka-222
    - kafka-231
    - kafka-241
    - kafka-260
    - kafka-271
